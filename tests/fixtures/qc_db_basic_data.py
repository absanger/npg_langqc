import pytest
from sqlalchemy import insert

from lang_qc.db.qc_schema import QcStateDict, QcType, SeqPlatform, SubProductAttr, User

QC_TYPES = [
    {"qc_type": "sequencing", "description": "Sequencing process evaluation"},
    {"qc_type": "library", "description": "Sample/library evaluation"},
]

QC_STATES = [
    {"state": "Failed, Instrument", "outcome": 0},
    {"state": "Failed, SMRT cell", "outcome": 0},
    {"state": "Failed", "outcome": 0},
    {"state": "Aborted", "outcome": 0},
    {"state": "Undecided", "outcome": None},
    {"state": "Passed", "outcome": 1},
    {"state": "Claimed", "outcome": None},
    {"state": "On hold", "outcome": None},
]

PLATFORMS = [
    {"name": "PacBio", "description": "Pacific Biosciences"},
    {"name": "ONT", "description": "Oxford Nanopore Technologies"},
    {"name": "Illumina", "description": "Illumina"},
]

ATTRIBUTE_NAMES = [
    {
        "attr_name": "run_name",
        "description": "The name of the PacBio run according to LIMS",
    },
    {"attr_name": "well_label", "description": "PacBio well (or cell) label"},
    {
        "attr_name": "flowcell_id",
        "description": "ONT flowcell id as recorded by the instrument",
    },
    {"attr_name": "run_id", "description": "Run id as generated by the ONT instrument"},
    {"attr_name": "id_run", "description": "Run id in the NPG run tracking system"},
    {"attr_name": "position", "description": "Illumina flowcell position (lane)"},
]

USERS = [
    {"username": "zx80@example.com"},
    {"username": "cd32@example.com"},
]


@pytest.fixture()
def load_dicts_and_users(qcdb_test_session):

    _dicts_and_users(qcdb_test_session)
    qcdb_test_session.commit()

    return qcdb_test_session


def _dicts_and_users(session):

    session.execute(insert(QcType), QC_TYPES)
    session.execute(insert(QcStateDict), QC_STATES)
    session.execute(insert(SeqPlatform), PLATFORMS)
    session.execute(insert(SubProductAttr), ATTRIBUTE_NAMES)
    session.execute(insert(User), USERS)
